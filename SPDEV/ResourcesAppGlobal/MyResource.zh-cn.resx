<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="activateYourAccount" xml:space="preserve">
    <value>点击邮件里的链接激活您的账号</value>
  </data>
  <data name="guest" xml:space="preserve">
    <value>如果您不想注册账号，可以选择使用用户名“guest”登录，密码也是“guest”</value>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>链接里Token参数无效，无法激活账户</value>
  </data>
  <data name="RegisterNewUser" xml:space="preserve">
    <value>使用邮箱注册新用户</value>
  </data>
  <data name="IForgetMyPassword" xml:space="preserve">
    <value>使用邮箱找回用户名重置密码</value>
  </data>
  <data name="IForgetMyPasswordUseEmailToReset" xml:space="preserve">
    <value>系统会向您下面提供的邮箱发送一份电子邮件，收到邮件后点击里面包含的链接以重置相关账号密码。</value>
  </data>
  <data name="SendEmailToActivateAccount" xml:space="preserve">
    <value>系统会向您下面提供的邮箱发送一份电子邮件(注意邮件可能会被邮件系统自动归为垃圾邮件).收到邮件后点击里面包含的链接以激活此账号。激活链接有效期30分钟。如果链接过期，或者您根本没收到激活邮件，可以点击登录页面上的”忘记账号密码“链接，重新获取一份找回账号链接，重置密码，同时激活账号。</value>
  </data>
  <data name="getBackAccountsLink" xml:space="preserve">
    <value>点击邮件里的链接找回您的账号</value>
  </data>
  <data name="NoUserRegisteredByThisEmail" xml:space="preserve">
    <value>没有用户账户用此邮箱注册。</value>
  </data>
  <data name="LinkExpired" xml:space="preserve">
    <value>链接过期，有效期自链接产生起30分钟。</value>
  </data>
  <data name="ChooseTheAccountRegisteredByThisMailbox" xml:space="preserve">
    <value>下面的账号都是以此邮箱注册，请选择并重置密码。</value>
  </data>
  <data name="GetBackAccountsWithEmail" xml:space="preserve">
    <value>使用邮箱找回用户名重置密码</value>
  </data>
  <data name="CannotChangePasswordForBuiltInAccount" xml:space="preserve">
    <value>系统内置账户密码不可更改</value>
  </data>
  <data name="WeChatConfig" xml:space="preserve">
    <value>微信公众号后台设置</value>
  </data>
  <data name="WeChatConfigDesc" xml:space="preserve">
    <value>此处的配置应和  https://mp.weixin.qq.com/ 里公众号的后台设置一致。</value>
  </data>
  <data name="WeChatServiceUrl" xml:space="preserve">
    <value>微信公众号服务Url</value>
  </data>
  <data name="WeChatServiceAppID" xml:space="preserve">
    <value>微信公众号开发者ID（AppID）</value>
  </data>
  <data name="WeChatServiceEncodingAESKey" xml:space="preserve">
    <value>微信公众号服务消息加解密密钥（EncodingAESKey）</value>
  </data>
  <data name="WeChatServiceToken" xml:space="preserve">
    <value>微信公众号服务令牌（Token）</value>
  </data>
  <data name="WeChatPublicAccountNameAndFBARole" xml:space="preserve">
    <value>微信公众号对应的表单认证角色</value>
  </data>
  <data name="WeChatFBASiteConfig" xml:space="preserve">
    <value>微信公众号及表单认证登录设置</value>
  </data>
  <data name="LoginFormQR" xml:space="preserve">
    <value>微信扫一扫二维码，关注公众号以获取网站用户名和动态密码。或者使用邮箱注册网站账号。</value>
  </data>
</root>